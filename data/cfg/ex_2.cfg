#“The London emergency services said that 11 people had been sent to hospital

#(s / say-01
#      :ARG0 (s2 / service
#            :mod (e / emergency)
#            :location (c / city :wiki ‘‘London’’
#                  :name (n / name :op1 ‘‘London’’)))
#      :ARG1 (s3 / send-01
#            :ARG1 (p / person :quant 11)
#            :ARG2 (h / hospital)

# This grammar has been simplified to produce ~3M sentences

# Begin by PENMANN root node
S -> ARG_0 V ARG_1
V -> V_say | V_aux V_say


# ARG_0
ARG_0 -> DET NP_ARG_0 | NP_ARG_0
# List all possible combinaisons
NP_ARG_0 -> NOUN_ARG_0 ARG_0_LOC ARG_0_MOD
NP_ARG_0 -> ARG_0_LOC ARG_0_MOD NOUN_ARG_0
NP_ARG_0 -> ARG_0_MOD NOUN_ARG_0 ARG_0_LOC
NOUN_ARG_0 -> 'service'
# ARG_0 : location
ARG_0_LOC -> LOC NOUN_ARG_0_LOC | NOUN_ARG_0_LOC
NOUN_ARG_0_LOC -> 'London'
# ARG_0 : mod
ARG_0_MOD -> ADJ_ARG_0_MOD
ADJ_ARG_0_MOD -> 'emergency'

# ARG_1
# Because Arg1 is a verb
ARG_1 -> PP_ARG_1
# use rule like PP -> to VP | VP  # VP -> V NP
PP_ARG_1 -> REL VP_ARG_1 | VP_ARG_1
VP_ARG_1 -> NP_ARG_1_1 PASSIVE_V_ARG1 NP_ARG_1_2
# use passive rule because no arg 0
PASSIVE_V_ARG1 -> V_aux V_ARG1 PREP | V_aux V_ARG1
V_ARG1 -> V_sent | V_sent 'to'

# ARG_1_ARG_1
NP_ARG_1_1 -> '11' NOUN_per | DET '11' NOUN_per
#NP_ARG_1_2 -> NOUN_hospital | DET NOUN_hospital  to reduce the number of possibility
NP_ARG_1_2 -> 'hospital'

# Global lexicon that will be always used
V_say -> 'say' | 'said' | 'says' | 'saying'
V_aux -> V_have | V_be | V_have V_be
V_have -> 'has' | 'have' | 'having' | 'had'
V_be -> 'is' | 'being' | 'be' | 'are' | 'was' | 'been'
V_sent -> 'send' | 'sent'
NOUN_per -> 'persons' | 'people'
NOUN_hospital -> 'hospital'
DET -> 'a' | 'the' | 'this' | 'those' | 'an'
LOC -> 'to' | 'at'
PREP -> 'by'
REL -> 'that'
