# ::snt The boy wants to ride the red bicycle .
#(v2 / want-01
#    :ARG0 (v1 / boy)
#    :ARG1 (v3 / ride-01
#        :ARG1 (v5 / bicycle
#            :mod (v4 / red))
#        :ARG0 v1))

# This grammar can produced ~1k sentences

# Begin by PENMANN root not
S -> ARG_0 V ARG_1
V -> V_want

# Then Arg0 being a noun
ARG_0 -> NP_ARG_0
# use rule like NP -> DET NOUN | SUB to automatically produce
NP_ARG_0 -> DET NOUN_boy | NOUN_boy | SUBJ_MALE

# Then Arg1 being a verb
ARG_1 -> PP_ARG_1
# use rule like PP -> to VP | VP  # VP -> V NP
PP_ARG_1 -> 'to' VP_ARG_1 | VP_ARG_1
VP_ARG_1 -> V_ride NP_ARG1_ARG0

# Then ARG1_ARG0 having a mod
NP_ARG1_ARG0 -> DET ADJ_MOD NOUN_bycicle | DET NOUN_bycicle REL_CLAUSE_MOD
# use rule like REL_CLAUSE > REL V_Be NP
REL_CLAUSE_MOD -> REL V_be ADJ_MOD
ADJ_MOD -> 'red'

# Global lexicon that will be always used
NOUN_boy -> 'boy'
NOUN_bycicle -> 'bicycle'
V_want -> 'want' | 'wanting' | 'wants'
V_be -> 'is' | 'being' | 'be' | 'are' | 'was'
DET -> 'a' | 'the' | 'one' | 'this' | 'those' | 'an'
SUBJ_MALE -> 'he' | 'him' | 'his'
SUBJ_NEUTRAL -> 'it' | 'that'
REL -> 'that' | 'which'
V_ride -> 'ride' | 'riding' | 'rides'
# ... very long list